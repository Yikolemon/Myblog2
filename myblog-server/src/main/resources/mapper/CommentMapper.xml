<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yikolemon.mapper.CommentMapper">

    <!--saveComment-->
    <update id="saveComment" parameterType="com.yikolemon.pojo.Comment">
        insert into t_comment values (#{id},#{nickname},#{email},
        #{content},#{createTime},#{blogId},#{parentCommentId},#{parentNickname},#{flag})
    </update>

    <!--listCommentByBlogId-->
    <select id="listCommentByBlogId" resultType="com.yikolemon.pojo.Comment">
        select id,nickname,content,create_time,parent_comment_id,parent_nickname,flag
        from t_comment where blog_id=#{blogId} order by id desc
    </select>

    <!--listBlogIfHasComments-->
    <select id="listBlogIfHasComments" resultType="com.yikolemon.pojo.Blog">
        select t_blog.id,title from t_blog where t_blog.id in
        (select t_comment.blog_id from t_comment group by t_comment.blog_id)
    </select>

    <!--deleteCommentById-->
    <delete id="deleteCommentById">
        delete from t_comment where t_comment.id=#{commentId}
    </delete>

    <!--getParentId-->
    <select id="hasParent" resultType="_boolean">
       select not ISNULL(t_comment.parent_comment_id) from t_comment where t_comment.id=#{commentId}
    </select>

    <!--getChildIds-->
    <select id="getChildIds" resultType="_long">
        select t_comment.id from t_comment where t_comment.parent_comment_id=#{commentId}
    </select>

    <!--getBlogIdByCommentId-->
    <select id="getBlogIdByCommentId" resultType="_long">
        select t_comment.blog_id from t_comment where t_comment.id=#{commentId}
    </select>

</mapper>